use arduino_build_helpers::{arduino_include_root, ArduinoBindgen, ArduinoBuilder};
use std::env;
use std::path::PathBuf;

/*fn spi_include_dir() -> String {
format!("{}/libraries/SPI/src", arduino_include_root())
}
*/

fn pubsubclient_git_src() -> &'static str {
    "../submodules/pubsubclient/src"
}

fn generate_bindings_rs() {
    let wrapper_h = format!("{}/PubSubClient.h", pubsubclient_git_src());
    println!("cargo:rerun-if-changed={}", wrapper_h);
    let bindings = bindgen::Builder::default()
        .header(wrapper_h)
        .rig_arduino_uno()
        .clang_args(&[
            &format!("-I{}", pubsubclient_git_src()),
            //&format!("-I{}", spi_include_dir()),
            "-x",
            "c++",
        ])
        .parse_callbacks(Box::new(bindgen::CargoCallbacks))
        .ctypes_prefix("rust_arduino_runtime::workaround_cty")
        // .ctypes_prefix("cty") // using this causes `undefined reference` link errors
        // these definitions have already been generated by Ethernet.h;  Ugh.
        .blocklist_file(format!(
            "{}/cores/arduino/IPAddress.h",
            arduino_include_root()
        ))
        .blocklist_file(format!("{}/cores/arduino/Client.h", arduino_include_root()))
        .blocklist_file(format!("{}/cores/arduino/Stream.h", arduino_include_root()))
        .generate()
        .expect("Unable to generate bindings");

    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
    let bindings_out_file = out_path.join("bindings.rs");
    bindings
        .write_to_file(bindings_out_file)
        .expect("Couldn't write bindings!");
}

fn compile_c_pubsubclient() {
    let anp_dir = pubsubclient_git_src();
    //let avr_tool_include = format!("{}/vendor/arduino-1.0.5/hardware/tools/avr/lib/avr/include", env!("HOME"));

    let mut builder = cc::Build::new();
    //let spi_dir = spi_include_dir();
    builder
        .include(&anp_dir)
        .rig_arduino(true)
        //  .include(spi_dir)
        .compiler("avr-g++");

    //

    builder.file(format!("{}/PubSubClient.cpp", &anp_dir));

    let name = "pubsubclient";

    println!("cargo:rustc-link-lib=static={}", name);
    builder.compile(&format!("lib{}.a", name));
}

fn main() {
    generate_bindings_rs();

    compile_c_pubsubclient();
}
